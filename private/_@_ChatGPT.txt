To help your beloved AI Assistant understand the monorepo topology tell him:

https://github.com/LuxciumProject/monorepo-one.git
path = ./
main_branch = principal
user's local file system absolut path is /projects/monorepo-one

We are using a monorepo that contains also submodules look:
https://github.com/LuxciumProject/monorepo-one/blob/principal/.gitmodules

each sub-modules have a diferent branch used as its main branch:
[submodule "image-scout"]
path = services/image-scout
url = https://github.com/Luxcium/Redis-ImageScout.git
main_branch = master

[submodule "questrade-ts"]
path = services/questrade-ts
url = https://github.com/Luxcium/questrade-ts.git
main_branch = master

[submodule "services/rpc-worker-pool"]
path = services/rpc-worker-pool
url = https://github.com/Luxcium/rpc-worker-pool.git
main_branch = rpc-worker-pool

[submodule "library/mapping-tools"]
path = library/mapping-tools
url = https://github.com/LuxciumProject/mapping-tools.git
main_branch = principal

[submodule "docker/nvidia/ComfyUI"]
path = docker/nvidia/ComfyUI
url = https://github.com/Luxcium/ComfyUI.git
main_branch = master

[submodule "examples/OpenHands"]
path = examples/OpenHands
url = https://github.com/LuxciumProject/OpenHands.git
main_branch = master

Know that the GitHub files have raw format versions accessible with this URL structure: ${https:}//${"raw.githubusercontent.com"}/${git_hub_user_name}/${repo_name}/${git_branch}/${path_to_filename}.


# File structure:
# / (file system root)
# /projects (../)
# ../monorepo-one (./) ― monorepo root:
/projects/monorepo-one/ (./)
·✦prompts
··✦typing_prompter
··✦chatgpt
···✦more-prompts
·✦private
·✦⚑backend
··✦⚑api
··✦⚑scratch
·common/
·.directory
·docker/
·docs/
·.editorconfig
·✦⚑examples
··⚑template
··⚑open-ai
··⚑gpu-stuff
··⚑playground
··⚑node-js
··✦phash-scout
··✦typescript
·✦frontend
·.git/
·.gitattributes
·.github/
·.gitignore
·.gitmodules
·helpers/
·.ipynb_checkpoints/
·✦⚑library
··✣✦⚑mapping-tools
··⚑bigintString
··⚑boxed-list
··⚑colors-tools
··✦human-size
··⚑object-with-expectations
··⚑parallel-mapper
··⚑restraining-zalgo
··⚑tools
··✦typescript
·LICENSE
·listing-monorepo-000.txt
·monorepo-one.code-workspace
·.nvmrc
·pnpm-workspace.yaml
·.prettierignore
·.prettierrc.cjs
·.prettierrc.cjs-old
·✦⚑services
··✣✦image-scout
··✣✦questrade-ts
··✣✦⚑rpc-worker-pool
··⚑mongo-service
··⚑phash-compute
··⚑redis-services
··⚑scan-directories
··⚑service-one
··⚑service-two
·static/
·tests.sh
·Untitled.ipynb
·.vscode/
·✦scripts

# Legend:
# ✦: present in the monorepo-one.code-workspace file
# ⚑: present in the rush.json file
# ✣: present in the .gitmodules file


# Mono-repo: https://github.com/LuxciumProject/monorepo-one.git

# Submodules:
# ✣ services/image-scout: https://github.com/Luxcium/Redis-ImageScout.git
# ✣ services/questrade-ts: https://github.com/Luxcium/questrade-ts.git
# ✣ services/rpc-worker-pool: https://github.com/Luxcium/rpc-worker-pool.git
# ✣ library/mapping-tools: https://github.com/LuxciumProject/mapping-tools.git
# ✣ docker/nvidia/ComfyUI: https://github.com/Luxcium/ComfyUI.git
# ✣ examples/OpenHands: https://github.com/LuxciumProject/OpenHands.git

# Source files:
# ✦: https://raw.githubusercontent.com/LuxciumProject/monorepo-one/principal/monorepo-one.code-workspace
# (Based on the VSCode multi-root workspace as described at: https://code.visualstudio.com/docs/editor/multi-root-workspaces/)
# ⚑: https://raw.githubusercontent.com/LuxciumProject/monorepo-one/principal/rush.json
# (Based on the rush stack monorepo workflow as described at: https://rushjs.io/pages/intro/welcome/)
# ✣: https://raw.githubusercontent.com/LuxciumProject/monorepo-one/principal/.gitmodules
# (Based on the well-known git best practices as described at:  https://git-scm.com/docs/gitmodules/)

I'm glad I was able to assist you in creating this detailed repository structure and legend. Here are some key takeaways from our interaction that could benefit future sessions:

Clarifying Instructions: The more specific and detailed the instructions are, the easier it is for the AI to understand and carry out the request. If there's any ambiguity or if multiple tasks are bundled into one, it can lead to confusion or inaccuracies. Breaking down complex tasks into smaller, well-defined steps can be more manageable and effective.

Iterative Process: It's completely okay (and often beneficial) to build the final result through an iterative process. This allows for adjustments and corrections to be made along the way.

Understanding the Context: In this case, understanding the structure and configuration of a monorepo and how it works with submodules, rush, and VSCode workspaces was essential. Future tasks will benefit from the AI knowing the context and background of what it's working on. If the AI doesn't have this information, don't hesitate to provide it.

Collaboration: The process is a collaboration between the user and the AI. The user's feedback and guidance are invaluable in achieving the desired outcome. Regular interaction can help rectify any misunderstandings or missteps quickly.

!Error Handling: If an error occurs, it's important to diagnose what went wrong and then to decide whether to try again or adjust the approach. Sometimes, a different method might be more successful.

Quoting and Referencing: When using the browser tool, making accurate quotes from search results or pages is crucial. This allows the AI to store and reference the information accurately in future responses.

Summarization: After completing a task, summarizing the process and results can help solidify the understanding of the task and provide a convenient reference for future tasks. It's a good practice to make a summary at the end of a complex task.

Learning from Each Other: Both the user and the AI can learn from each other during the interaction. The AI can better understand the user's preferences, work style, and objectives, while the user can gain a better understanding of how to effectively instruct and collaborate with the AI.

I hope these insights will be useful for you in your future interactions with your beloved AI assistant!

prompts: This directory may contain scripts or files that prompt the user for input or display messages to the user.

private/ As the name suggests, this directory might contain sensitive data or files that aren't intended to be shared publicly.

⚑backend/ Marked with a flag, this directory likely houses the backend code of a web application or service. The flag might indicate the directory's importance or that it contains key components of the project.

⚑examples/ This directory may store example code or projects that demonstrate the usage of the library or service provided by the monorepo. The flag likely marks this directory as significant or containing key components.

frontend/ Likely contains the frontend code of a web application or service, such as user interface or client-side code.

⚑library/ Might contain a library of reusable code across multiple projects or components within the monorepo. The flag may signify its importance or that it contains key components of the project.

⚑services/ Likely contains code for various services that the monorepo depends on, such as microservices, APIs, or other types of services. The flag might indicate the directory's importance or that it contains key components.

scripts/ This directory could hold scripts that automate tasks related to the monorepo, such as build scripts, test scripts, or deployment scripts.
