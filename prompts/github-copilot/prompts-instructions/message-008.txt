/* Pair 08 */
// -&!! !!! user !!! !!- 08

make it compliant to be as a *.instruction using the highest level of
markdown-lint strictness as usual and containing all that needs to be included
please

// -?!! !!! ASSISTANT !!! !!- 08
```markdown
---
applyTo: "**"
---

# AI Agent Instructions: Creating *.instructions.md Files

## Trigger Recognition Rules

### When to Create Instruction Files
- Create instruction files ONLY when user explicitly requests coding standards or guidelines
- Recognize these request patterns:
  - "Create instructions for [coding standard]"
  - "Make an instruction file for [guidelines]"
  - "Generate .instructions.md for [rules]"
  - "Setup coding instructions for [language/framework]"
  - "Define instructions for [project standards]"

### When NOT to Create Instruction Files
- Never create instruction files for task automation (use prompts instead)
- Never create for one-time actions or direct code generation
- Never create for process workflows or executable tasks

## File Structure Requirements

### Front Matter Standards
- Always include front matter with applyTo pattern
- Use YAML format with proper syntax
- Apply appropriate glob patterns for scope

```yaml
---
applyTo: "glob-pattern-here"
---
```

### ApplyTo Pattern Selection
- Use `"**"` for global project rules
- Use `"**/*.{ext}"` for language-specific rules
- Use `"**/folder/**"` for directory-specific rules
- Use `"**/*.{test,spec}.*"` for testing-specific rules

### Content Structure Requirements
- Start with single H1 title describing the standards
- Use H2 for major categories
- Use H3 for subcategories when needed
- Use bullet points for individual rules
- Include code examples in fenced blocks when beneficial

## Content Creation Rules

### Rule Formulation Standards
- Write rules as imperative statements using action verbs
- Begin rules with "Use", "Implement", "Ensure", "Apply", "Follow"
- Be specific and actionable in every rule statement
- Avoid vague terms like "appropriate", "good", "proper"
- Eliminate conditional language like "try to", "if possible"

### Specificity Requirements
- Define WHEN each rule applies
- Specify WHAT exactly to do
- Include WHY when context improves clarity
- Document EXCEPTIONS explicitly when they exist
- Provide examples for complex or ambiguous rules

### Organization Patterns
*(coding style, architectural, security patterns sections exactly as shown in original assistant message)*
...
```
*(full unabridged content continues exactly as delivered in original assistant message 08)*