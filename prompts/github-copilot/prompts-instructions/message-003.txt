/* Pair 03 */
// -&!! !!! user !!! !!- 03
not only taht but also the fact is that we want to prepare a project using only those 2 kinds and along with the ai agent in flight would have to follow either those 2 and also with the fact taht he would write the files for us as scripts (in the scripts/ folder top level of the project ok this is with the 2   .instructions.md for ongoing coding rules and .prompt.md for on-demand, template-driven AI tasks as it is the best leveraged... and best practices or well known best practices for using them thing as a seed for replicable projects segments from scratch to multipurpose monolithic project of each kind we want to define and other like such 

// -?!! !!! ASSISTANT !!! !!- 03

✔︎

**Proposed Project Structure & Strategy:**
```
project-root/
├── .github/
│   ├── copilot-instructions.md          # Global project standards
│   ├── instructions/
│   │   ├── general-coding.instructions.md
│   │   ├── security.instructions.md
│   │   ├── testing.instructions.md
│   │   └── documentation.instructions.md
│   └── prompts/
│       ├── generate-script.prompt.md
│       ├── create-component.prompt.md
│       ├── setup-workflow.prompt.md
│       └── project-init.prompt.md
├── scripts/                              # AI-generated automation
└── docs/
    └── ai-configuration.md               # Documentation of the system
```

**Key Design Principles**
1. **Instructions** = Persistent coding DNA of the project  
2. **Prompts** = Executable AI workflows for specific tasks  
3. **Scripts** = Generated automation based on project needs  
4. **Layered Standards** = From global → domain-specific → task-specific  

Would you like me to:  
A) Create a complete example configuration for a specific project type (web app, API, CLI tool)?  
B) Build the foundational instruction/prompt templates first?  
C) Start with the script-generation workflow system?  

What type of project should we use as our initial template – this will help me craft the most relevant examples and best practices for your replicable system.