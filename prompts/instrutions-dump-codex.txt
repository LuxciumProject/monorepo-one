
## codex

Below is a quick survey of the different ways you can ‚Äúteach‚Äù the Codex-CLI agent (or any of the
other project agents) to remember a special preference or instruction from one session to the next,
 followed by my recommendation for the most efficient, maintainable approach in our current
multi‚Äêagent context.

### 1. In-session Prompt Injection (Ephemeral)

What it is
‚Ä¢ You prepend a reminder or special instruction every time you invoke the agent (e.g. via a ‚Äìprompt
 flag or by copy-pasting at the top of your chat).
‚Ä¢ That context lives only for the duration of the session/query.

Pros
‚Ä¢ No changes to the repo.
‚Ä¢ Immediate, flexible overrides.

Cons
‚Ä¢ Tedious to repeat on every session.
‚Ä¢ Easy to forget; doesn‚Äôt persist.

### 2. Environment Variables or CLI-Level Config

What it is
‚Ä¢ Export an env var (e.g. export CODEX_CLI_PREFER_FAST_REPLY=true) or use a local
~/.codexcli/config.toml/.yaml to hold preferences.
‚Ä¢ Codex-CLI reads those at startup.

Pros
‚Ä¢ Persisted across sessions on that machine.
‚Ä¢ Can be easily toggled or scripted.

Cons
‚Ä¢ Machine-local; not shared via repo.
‚Ä¢ Requires coding the agent to read/apply these settings.

### 3. Dedicated ‚ÄúAgent Memory‚Äù File

What it is
‚Ä¢ Maintain a small JSON, YAML, or Markdown file (e.g. .agent_memory.yaml) in the repo or in your
home directory.
‚Ä¢ Agent code loads it on start and preserves new entries when you ask it to ‚Äúremember‚Äù something.

Pros
‚Ä¢ Can be versioned in Git (if checked in).
‚Ä¢ Structured, extensible ‚Äúmemory‚Äù for richer state.

Cons
‚Ä¢ Requires implementing read/write logic in the agent.
‚Ä¢ Risk of merge conflicts if many people edit it.

### 4. ‚ÄúGolden Source‚Äù Instructions in AGENTS.md (or .clinerules)

What it is
‚Ä¢ Codify your preference in the project‚Äôs primary instructions files:

    * **AGENTS.md** for global, cross-agent policies and reminders.
    * Files under **`.clinerules/`** for agent-specific rules.

Pros
‚Ä¢ Single source of truth versioned in Git.AGENTS.md
‚Ä¢ Automatically applied to every session of every agent (Codex-CLI, Cline AI, Copilot Chat).
‚Ä¢ Transparent to the whole team; no local setup required.

Cons
‚Ä¢ Requires a PR/update against AGENTS.md or .clinerules/ whenever you want to tune the preference.

### 5. Git Commit Hooks or Automation Scripts

What it is
‚Ä¢ Add a Git hook (e.g. pre-commit or prepare-commit-msg) or a wrapper script (scripts/‚Ä¶) that
ensures certain flags or reminders are always injected.

Pros
‚Ä¢ Enforced at commit or script-entry level without manual step.

Cons
‚Ä¢ Overkill for something as simple as a chat-agent preference.
‚Ä¢ Can be brittle and hard to maintain.

### 6. VS Code Copilot-Specific Instructions

What it is
‚Ä¢ If your preference only applies to VS Code Copilot Chat, drop a file like
.github/copilot-instructions.md or a front-matter-style .instructions.md under
.github/instructions/.

Pros
‚Ä¢ Targeted purely at Copilot Chat; invisible elsewhere.

Cons
‚Ä¢ Does nothing for Codex-CLI or Cline AI agents.


### üîë Recommended Best Practice for Our Current Multi-Agent Setup

Given that we‚Äôre running three different agents (Codex-CLI, Cline AI, and VS Code Copilot Chat) and
 want a single, shareable source of truth that every agent will automatically load:

    1. **Persist your preference in‚ÄØAGENTS.md**
       ‚Äì This file already exists as the *primary* entry point for project-wide rules and
memory.[AGENTS.md](/projects/annexes/codex_cli-k3/AGENTS.md)
       ‚Äì Add a clearly marked section (e.g. ‚ÄúSession-Sticky Preferences‚Äù) at the bottom.
    2. **Optionally mirror agent-specific variations in `.clinerules/`**
       ‚Äì If you later need Cline AI or Copilot Chat to behave slightly differently, you can drop
targeted rules in `.clinerules/` or the Copilot instructions folder, but keep the global intent in
AGENTS.md.
    3. **Version-control and peer-review**
       ‚Äì By committing this change, everyone (and every agent) picks up the instruction on their
next run‚Äîno manual copy-pasting or local env vars required.

#### Example snippet to append to‚ÄØAGENTS.mdx

    ### Session-Sticky Preferences

Whenever the user requests an operational preference (e.g. ‚Äúreply quickly‚Äù mode), all agents MUST read and honor that preference across future sessions. To update or remove such a preference, edit this section using markdown-lint compliant syntax.

Why this is best here

    * **Single source of truth**: AGENTS.md is already our central ‚Äúhow we work‚Äù doc.
    * **Cross-agent**: Applies to Codex-CLI, Cline AI, and Copilot Chat all at once.

NEVER REMOVE ONLY ADD (or update) AUTOMATICALLY THIS FILE TO RECORD PREFERENCES FOR THE USER AND TO SET A STATEFUL AND SOULFUL EXPERIENCE (remember to the AGENTS.md if you are CODE CLI by openai, or read only if you are Cline AI or VS Code Copilot Chat).
