Hello we will be working together on a project using Typescript and Python in a special way because I have been struggling for a moment using ChatGPT-3.5 and ChatGPT-4 to help me with a large project I finally figured out how I want to work on my project to be able to achieve something larger that what can be contain inside of our conversation let me explain you what we would be doing...

I decided to use 2 approach and combine them into one.

The first approach is to treat each module as a black box.

In highly modularized programming paradigms, the concept of black boxes involves treating individual modules or components as self-contained units with well-defined inputs and outputs, without necessarily understanding or knowing the internal details of how they work. This approach enables developers to focus on optimizing the interfaces between components, without needing to worry about specific implementation details. By thinking about each module as a black box, developers can leverage concepts such as hierarchy, layering, containment, gradation, inclusion, enmeshment, interconnectedness, nesting dolls, and recursion to break down complex systems into smaller, more manageable components. This can lead to more efficient development and debugging, as well as improved scalability and flexibility in the system design.

it implies that the modules, here think even in smaller chunks where functions are the modular pieces and the concept of modules like in JavaScript would be like the ESM definition and both would be related but the ESM module would not be the smallest modular element in the approach it would imply functions that are either exactly like the pure functions of functional  programming where they can be strictly defined with an interface like in TypeScript but also think of functions that are almost pure (they are not pure in the sens of functional programming so they would require documentation rather that simple typescript interfaces as they would mostly be the function that have an effect on the file system or the functions that could raise exceptions or those which would connect to other part of the project like redis caches and such therefor it would require a little bit more than the single interface but tsdocs and typedoc should be crafted in such a way that it would be enough to understand what our little black box would be doing).


The other part of the approach is compatible with the first one but to me it is both completely different and also related to what I want to do so far.
I want to make the project always ready to work.
It is a strange approach that I would love you to find a name for either using already existing similar approaches or if it is new then create a meaningful appellation for the concept.
I want to let's say start with a file that would be mostly empty and then let's say I would want the project to always be in the completed state.
It is difficult to explain because I want to work on a tool capable of accomplishing some tasks and obviously it is weird to me to say it would be working even before it is capable to accomplish the task, so I will be so happy when you will be re-explaining me that technique to better understand what I am trying to explain, for now let's say it is working meaning that it is not crashing.
If the first half of the approach was the one putting the emphasis on the best practices in terms of interface creation and good documentation practices, this other half of the approach will be the one that will put a high emphasis on testing the project (using jest for the typescript part and well known best practices for the python part of the project).
Also because the project is highly modular it should be really really easy to implement a 100% coverage right at the early beginning.
Despite the fact that the testing approach is one of the very important elements of this section, it is not what I want you to remember.
The same way that the first half was not specifically about the documentation, this second half is not about the testing.
So what is it all about?
Well I already said the main part.
I want the project to be highly incremental starting with a few no-ops and implementing them as we go then adding a few more no-ops and implementing them (implementing meaning to create the corresponding operation).
I said it was both different and similar both related and unrelated to the first half but the way how it is related is that it push the concept of modularity so far that even inside of the module (or functions) being created it is accomplished small pieces at a time pushing the concept of black boxing to each line of code even pushing the modularization to each variable each function calls and so on.
The reason why I came up with this approach was because my interactions with the model (especially the ChatGPT-3.5 and lower) it was giving me a lot and lot of code and I ended up having many problems and then asking question and corrections was complicated because it was moving the conversation out of scope of the initial code and making it way too complicated.
If instead the function is first a no op that do not change anything it means that the code is still working exactly as before but conceptually one piece is added it is not doing concretely anything yet but conceptually we can already see what it will be doing maybe it will parse a path or maybe it will do this or that also because we will want to make it do something it implies indirectly that it will have to only accomplish a small piece at a time.
This is the essence of the first half of the concept that was asking for hyper modularisation.
It also implies something very powerful, strong and amazing.
The code is first written as pseudo code but it is not any random pseudo code it is pseudo code that is also valid typescript code or valid python code or whatever.
So this second half is the nature of what I would temporarily call highly incremental or highly recursive.
The fact that I have been explaining myself for so long without having a working project was so frustrating.
Now at the minute 0 I already have a working project I would have one file with an empty main function of with a main function and a console log and I would call the main function and already I would have a finished project I would push that on GitHub and call it a day.
(well a minute... the minute 0 haha.. ok maybe you can not laugh but I did for you and me).
To be serious then I would say I want to modify an image doing this or that to the image.
It would imply to have a path so we would create the part of the code that get the string of the path (instead of the complicated implementation that ChatGPT-3.5 was giving me and that was not working and that I would have to argue with him and then he would misunderstand and then the frustration is so hard on me).
This is why this new approach (or this half of the overall paradigm) will be way less stressful.
An analogy come to my mind.
If you drive during the night from Montréal to Toronto the old approach was to have all the detail of each point of the road at any given time in focus and in scope with me and my AI Assistant.
When in the real life you only need to see as far as your head lights can shine and you will make it to Toronto from Montréal even in the darkest night ever.
Same with our project my AI Assistant (and also myself) do not need to know the complete path.
We do not even need a GPS in this metaphor as long as you know how to read the signs along the road and that you have an overall idea of where you want to go.
You see this is what I want to do because I am tired of the complicated arguments with my AI Assistant I now just want to focus one the next 100 meters or so and this will be enough....
